import {
  StyledModalBackdrop,
  StyledModalRoot
} from "./chunk-KPJ56BF3.js";
import {
  CloseModalContext_default
} from "./chunk-3FKV7K6F.js";
import {
  ModalDialogSizeContext_default
} from "./chunk-UXJKZSRM.js";
import {
  dialogTitleClasses_default
} from "./chunk-2DQYU2M7.js";
import {
  ModalDialogVariantColorContext_default
} from "./chunk-XR227ULA.js";
import {
  applySoftInversion,
  applySolidInversion
} from "./chunk-VJLCFOLR.js";
import {
  FocusTrap,
  Portal,
  useModal
} from "./chunk-WGX2G3QN.js";
import {
  generateUtilityClass,
  generateUtilityClasses,
  styled_default,
  useSlot,
  useThemeProps
} from "./chunk-PACH6I47.js";
import {
  HTMLElementType,
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  init_extends,
  init_objectWithoutPropertiesLoose,
  init_utils,
  require_prop_types,
  useId
} from "./chunk-LX67TY3N.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@mui/joy/Drawer/Drawer.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/joy/Drawer/drawerClasses.js
function getDrawerUtilityClass(slot) {
  return generateUtilityClass("MuiDrawer", slot);
}
var drawerClasses = generateUtilityClasses("MuiDrawer", ["root", "hidden", "backdrop", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var drawerClasses_default = drawerClasses;

// node_modules/@mui/joy/Drawer/Drawer.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["children", "anchor", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "color", "variant", "invertedColors", "size", "onClose", "onKeyDown", "open", "component", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    open,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", !open && "hidden", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    backdrop: ["backdrop"],
    content: ["content"]
  };
  return composeClasses(slots, getDrawerUtilityClass, {});
};
var DrawerRoot = styled_default(StyledModalRoot, {
  name: "JoyDrawer",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  "--Drawer-transitionDuration": "0.3s",
  "--Drawer-transitionFunction": "ease",
  "--ModalClose-radius": "max((var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(350px, 30%, 100%)",
  "--Drawer-horizontalSize": "clamp(256px, 20%, 100%)",
  "--Drawer-titleMargin": "0.625rem 0.75rem calc(0.625rem / 2)"
}, ownerState.size === "md" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(400px, 45%, 100%)",
  "--Drawer-horizontalSize": "clamp(300px, 30%, 100%)",
  "--Drawer-titleMargin": "0.75rem 0.75rem calc(0.75rem / 2)"
}, ownerState.size === "lg" && {
  "--ModalClose-inset": "0.75rem",
  "--Drawer-verticalSize": "clamp(500px, 60%, 100%)",
  "--Drawer-horizontalSize": "clamp(440px, 60%, 100%)",
  "--Drawer-titleMargin": "1rem 1rem calc(1rem / 2)"
}, {
  transitionProperty: "visibility",
  transitionDelay: ownerState.open ? "0s" : "var(--Drawer-transitionDuration)"
}, !ownerState.open && {
  visibility: "hidden"
}));
var DrawerBackdrop = styled_default(StyledModalBackdrop, {
  name: "JoyDrawer",
  slot: "Backdrop",
  overridesResolver: (props, styles) => styles.backdrop
})(({
  ownerState
}) => ({
  opacity: ownerState.open ? 1 : 0,
  transition: "opacity var(--Drawer-transitionDuration) ease-in-out"
}));
var DrawerContent = styled_default("div", {
  name: "JoyDrawer",
  slot: "Content",
  overridesResolver: (props, styles) => styles.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({}, theme.typography[`body-${ownerState.size}`], {
    boxShadow: theme.shadow.md,
    backgroundColor: theme.vars.palette.background.surface,
    outline: 0,
    display: "flex",
    flexDirection: "column",
    position: "fixed",
    boxSizing: "border-box",
    overflow: "auto"
  }, ownerState.anchor === "left" && {
    top: 0,
    left: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(-100%)"
  }, ownerState.anchor === "right" && {
    top: 0,
    right: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(100%)"
  }, ownerState.anchor === "top" && {
    top: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(-100%)"
  }, ownerState.anchor === "bottom" && {
    bottom: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(100%)"
  }, {
    height: ownerState.anchor.match(/(left|right)/) ? "100%" : "min(100vh, var(--Drawer-verticalSize))",
    width: ownerState.anchor.match(/(top|bottom)/) ? "100vw" : "min(100vw, var(--Drawer-horizontalSize))",
    transition: "transform var(--Drawer-transitionDuration) var(--Drawer-transitionFunction)"
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    [`& > .${dialogTitleClasses_default.root}`]: {
      "--unstable_DialogTitle-margin": "var(--Drawer-titleMargin)"
    }
  });
});
var Drawer = React.forwardRef(function Drawer2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDrawer"
  });
  const {
    children,
    anchor = "left",
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    color = "neutral",
    variant = "plain",
    invertedColors = false,
    size = "md",
    onClose,
    open,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    anchor,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    invertedColors,
    color,
    variant,
    size
  });
  const {
    getRootProps,
    getBackdropProps,
    rootRef,
    portalRef,
    isTopModal
  } = useModal(_extends({}, ownerState, {
    rootRef: ref,
    children: null
  }));
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const labelledBy = useId();
  const describedBy = useId();
  const contextValue = React.useMemo(() => ({
    variant,
    color,
    labelledBy,
    describedBy
  }), [color, variant, labelledBy, describedBy]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: classes.root,
    elementType: DrawerRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotBackdrop, backdropProps] = useSlot("backdrop", {
    className: classes.backdrop,
    elementType: DrawerBackdrop,
    externalForwardedProps,
    getSlotProps: getBackdropProps,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: DrawerContent,
    additionalProps: {
      tabIndex: -1,
      role: "dialog",
      "aria-modal": "true",
      "aria-labelledby": labelledBy,
      "aria-describedby": describedBy
    },
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(CloseModalContext_default.Provider, {
    value: onClose,
    children: (0, import_jsx_runtime.jsx)(ModalDialogSizeContext_default.Provider, {
      value: size,
      children: (0, import_jsx_runtime.jsx)(ModalDialogVariantColorContext_default.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime.jsx)(Portal, {
          ref: portalRef,
          container,
          disablePortal,
          children: (0, import_jsx_runtime2.jsxs)(SlotRoot, _extends({}, rootProps, {
            children: [!hideBackdrop ? (0, import_jsx_runtime.jsx)(SlotBackdrop, _extends({}, backdropProps)) : null, (0, import_jsx_runtime.jsx)(FocusTrap, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: (0, import_jsx_runtime.jsx)(SlotContent, _extends({}, contentProps, {
                children
              }))
            })]
          }))
        })
      })
    })
  });
});
true ? Drawer.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: import_prop_types.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types.default.oneOfType([HTMLElementType, import_prop_types.default.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types.default.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types.default.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: import_prop_types.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types.default.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types.default.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: import_prop_types.default.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: import_prop_types.default.bool,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types.default.bool,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"closeClick"`.
   */
  onClose: import_prop_types.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types.default.bool.isRequired,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    backdrop: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    content: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    backdrop: import_prop_types.default.elementType,
    content: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Drawer_default = Drawer;

export {
  getDrawerUtilityClass,
  drawerClasses_default,
  Drawer_default
};
//# sourceMappingURL=chunk-K7U4UCIC.js.map
